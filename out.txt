
==================================================================
Analyzing the AST...
==================================================================

******************************************************************
(0) ENTERING SCOPE: GLOBAL
******************************************************************

(6) (INSERT SYMBOL)
	[Global Scope]:
	Symbol "gromit" not found!
	Inserted symbol "gromit".

(6) (INSERT SYMBOL)
	[Global Scope]:
	Symbol "mysteriousPenguin" not found!
	Inserted symbol "mysteriousPenguin".

(9) (INSERT SYMBOL)
	[Global Scope]:
	Symbol "wallace" not found!
	Inserted symbol "wallace".

******************************************************************
(9) ENTERING SCOPE: FUNCTION_wallace
******************************************************************

(9) (INSERT SYMBOL)
	[Current Scope]:
	Symbol "wrong" not found!
	Inserted symbol "wrong".

(9) (INSERT SYMBOL)
	[Current Scope]:
	Symbol "trousers" not found!
	Inserted symbol "trousers".

(11) (INSERT SYMBOL)
	[Current Scope]:
	Symbol "close" not found!
	Inserted symbol "close".
	[Has Initializer]

(11) (INSERT SYMBOL)
	[Current Scope]:
	Symbol "shave" not found!
	Inserted symbol "shave".
	[Has Initializer]

(12) (INSERT SYMBOL)
	[Current Scope]:
	Symbol "cheese" not found!
	Inserted symbol "cheese".
	[Has Initializer]

(14) 
(15) [Process ID - "close"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "close" (VARIABLE)

(16) [Process Binary - OPERATOR]
[Check Binary Types]

(16) 
(16) 
(16) 
(16) 
(17) [Process Assign - ASSIGNMENT]
[Process ID - "close"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "close" (VARIABLE)
[Process ID - "shave"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "shave" (VARIABLE)
[Check Binary Types]

(18) [Process Assign - ASSIGNMENT]
[Process ID - "wrong"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "wrong" (PARAMETER)
[Process Binary - OPERATOR]
[Process ID - "trousers"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "trousers" (PARAMETER)
[Check Binary Types]
[Check Binary Types]

(18) 
(18) [Process ID - "wrong"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "wrong" (PARAMETER)

(19) [Process Assign - ASSIGNMENT]
[Process ID - "gromit"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol "gromit" not found!
	[Global Scope]:
	Symbol Found: "gromit" (VARIABLE)
[Process Binary - OPERATOR]
[Check Binary Types]
[Check Binary Types]

(19) [Process Binary - OPERATOR]
[Process ID - "wrong"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "wrong" (PARAMETER)
[Process ID - "trousers"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "trousers" (PARAMETER)
[Check Binary Types]

(19) [Process ID - "gromit"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol "gromit" not found!
	[Global Scope]:
	Symbol Found: "gromit" (VARIABLE)

(19) 
(20) [Process Assign - ASSIGNMENT]
[Process ID - "gromit"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol "gromit" not found!
	[Global Scope]:
	Symbol Found: "gromit" (VARIABLE)
[Check Binary Types]

(21) [Process Assign - ASSIGNMENT]
[Process ID - "gromit"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol "gromit" not found!
	[Global Scope]:
	Symbol Found: "gromit" (VARIABLE)
[Check Binary Types]

(21) 
(22) [Process Assign - ASSIGNMENT]
[Process ID - "gromit"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol "gromit" not found!
	[Global Scope]:
	Symbol Found: "gromit" (VARIABLE)
[Process Assign - ASSIGNMENT]
[Process ID - "wrong"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "wrong" (PARAMETER)
[Check Binary Types]
[Check Binary Types]

(23) [Process Assign - ASSIGNMENT]
[Process ID - "close"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "close" (VARIABLE)
[Check Binary Types]

(23) [Process Binary - OPERATOR]
[Process ID - "wrong"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "wrong" (PARAMETER)
[Process ID - "trousers"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "trousers" (PARAMETER)
[Check Binary Types]

(23) [Process Binary - OPERATOR]
[Process ID - "trousers"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "trousers" (PARAMETER)
[Process ID - "gromit"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol "gromit" not found!
	[Global Scope]:
	Symbol Found: "gromit" (VARIABLE)
[Check Binary Types]

(24) [Process Assign - ASSIGNMENT]
[Process ID - "shave"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "shave" (VARIABLE)
[Check Binary Types]

(24) [Process Binary - OPERATOR]
[Process ID - "wrong"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "wrong" (PARAMETER)
[Process ID - "trousers"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "trousers" (PARAMETER)
[Check Binary Types]

(24) [Process Binary - OPERATOR]
[Process ID - "trousers"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "trousers" (PARAMETER)
[Process ID - "gromit"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol "gromit" not found!
	[Global Scope]:
	Symbol Found: "gromit" (VARIABLE)
[Check Binary Types]

******************************************************************
(25) ENTERING SCOPE: COMPOUND_0
******************************************************************

(26) (INSERT SYMBOL)
	[Current Scope]:
	Symbol "a" not found!
	Inserted symbol "a".

(26) (INSERT SYMBOL)
	[Current Scope]:
	Symbol "grand" not found!
	Inserted symbol "grand".
	[Has Initializer]

(26) 
(26) 
(26) (INSERT SYMBOL)
	[Current Scope]:
	Symbol "day" not found!
	Inserted symbol "day".
	[Has Initializer]

(26) 
(26) 
(26) (INSERT SYMBOL)
	[Current Scope]:
	Symbol "out" not found!
	Inserted symbol "out".
	[Has Initializer]

(26) 
(27) [Process Assign - ASSIGNMENT]
[Process ID - "a"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "a" (VARIABLE)
[Process Assign - ASSIGNMENT]
[Process ID - "grand"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "grand" (VARIABLE)
[Process Assign - ASSIGNMENT]
[Process ID - "day"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "day" (VARIABLE)
[Process ID - "out"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "out" (VARIABLE)
[Check Binary Types]
[Check Binary Types]
[Check Binary Types]

##################################################################
(25) LEAVING SCOPE: COMPOUND_0
+----------------------------------------------------------------+
| SCOPE: "COMPOUND_0"                                            |
+----------------------------------------------------------------+
| VARIABLE => a : int                                            |
| VARIABLE => day : int                                          |
| VARIABLE => grand : int                                        |
| VARIABLE => out : int                                          |
+----------------------------------------------------------------+
##################################################################

(29) [Process Assign - ASSIGNMENT]
[Process ID - "close"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "close" (VARIABLE)
[Check Binary Types]

(29) [Process Binary - OPERATOR]
[Check Binary Types]

(29) [Process Binary - OPERATOR]
[Check Binary Types]

(29) 
(29) 
(29) 
(29) 
(29) [Process Binary - OPERATOR]
[Check Binary Types]

(29) 
(29) 
(29) 
(30) [Process Assign - ASSIGNMENT]
[Process ID - "shave"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "shave" (VARIABLE)
[Check Binary Types]

(30) 
(30) [Process Boolean Binary - AND]
[Check Binary Types]

(30) [Operation: Unary - CHSIGN_UNARY] [Check Unary Types]

(30) 
(30) [Process Binary - OPERATOR]
[Check Binary Types]

(30) [Process Binary - OPERATOR]
[Check Binary Types]

(30) [Process Binary - OPERATOR]
[Check Binary Types]

(30) [Operation: Unary - CHSIGN_UNARY] [Check Unary Types]

(31) 
(31) [Process Binary - OPERATOR]
[Process ID - "shave"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "shave" (VARIABLE)
[Process ID - "close"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "close" (VARIABLE)
[Check Binary Types]

(31) [Process Assign - ASSIGNMENT]
[Process ID - "shave"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "shave" (VARIABLE)
[Check Binary Types]

(31) [Process ID - "close"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "close" (VARIABLE)

(32) 
(32) [Operation: Unary - NOT] [Check Unary Types]

(32) [Process Binary - OPERATOR]
[Process ID - "shave"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "shave" (VARIABLE)
[Process ID - "close"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "close" (VARIABLE)
[Check Binary Types]

(32) [Operation: Unary - NOT] [Process ID - "close"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "close" (VARIABLE)
[Check Unary Types]

(32) [Process Assign - ASSIGNMENT]
[Process ID - "shave"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "shave" (VARIABLE)
[Check Binary Types]

(33) [Process Assign - ASSIGNMENT]
[Process ID - "close"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "close" (VARIABLE)
[Check Binary Types]

(34) [Process Assign - ASSIGNMENT]
[Process ID - "mysteriousPenguin"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol "mysteriousPenguin" not found!
	[Global Scope]:
	Symbol Found: "mysteriousPenguin" (VARIABLE)
[Check Binary Types]

(34) [Process Binary - OPERATOR]
[Check Binary Types]

(34) [Operation: Unary - CHSIGN_UNARY] [Check Unary Types]

(34) [Process Assign - ASSIGNMENT]
[Process ID - "cheese"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "cheese" (VARIABLE)
[Check Unary Types]

(36) 
(36) [Process ID - "shave"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "shave" (VARIABLE)

******************************************************************
(36) ENTERING SCOPE: COMPOUND_0
******************************************************************

(37) (INSERT SYMBOL)
	[Current Scope]:
	Symbol "were" not found!
	Inserted symbol "were".

(37) (INSERT SYMBOL)
	[Current Scope]:
	Symbol "rabbit" not found!
	Inserted symbol "rabbit".

(38) (INSERT SYMBOL)
	[Current Scope]:
	Symbol "sheep" not found!
	Inserted symbol "sheep".

(40) [Process Assign - ASSIGNMENT]
[Process ID Array - "sheep"] -> [Process Array]
[Process ID - "sheep"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "sheep" (VARIABLE_STATIC_ARRAY)
[Check Binary Types]

(41) 
(41) [Process Binary - OPERATOR]
[Process ID Array - "sheep"] -> [Process Array]
[Process ID - "sheep"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "sheep" (VARIABLE_STATIC_ARRAY)
[Check Binary Types]

(41) 
(42) [Process ID Call - "wallace"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol "wallace" not found!
	[Other Scope]:
	Symbol "wallace" not found!
	[Global Scope]:
	Symbol Found: "wallace" (FUNCTION)

(42) [Process Assign - ASSIGNMENT]
[Process ID - "gromit"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol "gromit" not found!
	[Other Scope]:
	Symbol "gromit" not found!
	[Global Scope]:
	Symbol Found: "gromit" (VARIABLE)
[Check Unary Types]

(42) [Process Binary - OPERATOR]
[Process ID - "were"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "were" (VARIABLE_STATIC)
[Process ID - "rabbit"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "rabbit" (VARIABLE_STATIC)
[Check Binary Types]

******************************************************************
(43) ENTERING SCOPE: COMPOUND_1
******************************************************************

(44) (INSERT SYMBOL)
	[Current Scope]:
	Symbol "the" not found!
	Inserted symbol "the".

(44) (INSERT SYMBOL)
	[Current Scope]:
	Symbol "wrong" not found!
	Inserted symbol "wrong".

(44) (INSERT SYMBOL)
	[Current Scope]:
	Symbol "trousers" not found!
	Inserted symbol "trousers".

(46) [Process Assign - ASSIGNMENT]
[Process ID - "the"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "the" (VARIABLE)
[Process Assign - ASSIGNMENT]
[Process ID - "wrong"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "wrong" (VARIABLE)
[Process Assign - ASSIGNMENT]
[Process ID - "trousers"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "trousers" (VARIABLE)
WARNING(46): Variable 'trousers' may be uninitialized when used here.
[Check Unary Types]
[Check Binary Types]
[Check Binary Types]

(47) 
(47) [Process Binary - OPERATOR]
[Process ID - "were"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol "were" not found!
	[Other Scope]:
	Symbol Found: "were" (VARIABLE_STATIC)
[Process ID - "rabbit"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol "rabbit" not found!
	[Other Scope]:
	Symbol Found: "rabbit" (VARIABLE_STATIC)
[Check Binary Types]

(47) [Process Assign - ASSIGNMENT]
[Process ID - "were"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol "were" not found!
	[Other Scope]:
	Symbol Found: "were" (VARIABLE_STATIC)
[Process Assign - ASSIGNMENT]
[Process ID - "wrong"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "wrong" (VARIABLE)
[Check Unary Types]
[Check Binary Types]

##################################################################
(43) LEAVING SCOPE: COMPOUND_1
+----------------------------------------------------------------+
| SCOPE: "COMPOUND_1"                                            |
+----------------------------------------------------------------+
| VARIABLE => the : int                                          |
| VARIABLE => trousers : int                                     |
| VARIABLE => wrong : int                                        |
+----------------------------------------------------------------+
##################################################################

##################################################################
(36) LEAVING SCOPE: COMPOUND_0
+----------------------------------------------------------------+
| SCOPE: "COMPOUND_0"                                            |
+----------------------------------------------------------------+
| VARIABLE_STATIC => rabbit : int                                |
| VARIABLE_STATIC_ARRAY => sheep : int                           |
| VARIABLE_STATIC => were : int                                  |
+----------------------------------------------------------------+
##################################################################

(50) [Process Return]

##################################################################
(9) LEAVING SCOPE: FUNCTION_wallace
+----------------------------------------------------------------+
| SCOPE: "FUNCTION_wallace"                                      |
+----------------------------------------------------------------+
| VARIABLE => cheese : int                                       |
| VARIABLE => close : bool                                       |
| VARIABLE => shave : bool                                       |
| PARAMETER => trousers : int                                    |
| PARAMETER => wrong : int                                       |
+----------------------------------------------------------------+
##################################################################

(54) (INSERT SYMBOL)
	[Global Scope]:
	Symbol "penguin" not found!
	Inserted symbol "penguin".

******************************************************************
(54) ENTERING SCOPE: FUNCTION_penguin
******************************************************************

(54) (INSERT SYMBOL)
	[Current Scope]:
	Symbol "Feathers" not found!
	Inserted symbol "Feathers".

(54) (INSERT SYMBOL)
	[Current Scope]:
	Symbol "McGraw" not found!
	Inserted symbol "McGraw".

(54) (INSERT SYMBOL)
	[Current Scope]:
	Symbol "moon" not found!
	Inserted symbol "moon".

(54) (INSERT SYMBOL)
	[Current Scope]:
	Symbol "cheese" not found!
	Inserted symbol "cheese".

(54) (INSERT SYMBOL)
	[Current Scope]:
	Symbol "launch" not found!
	Inserted symbol "launch".

(56) (INSERT SYMBOL)
	[Current Scope]:
	Symbol "tottington" not found!
	Inserted symbol "tottington".
	[Has Initializer]

(57) (INSERT SYMBOL)
	[Current Scope]:
	Symbol "Wensleydale" not found!
	Inserted symbol "Wensleydale".

(58) (INSERT SYMBOL)
	[Current Scope]:
	Symbol "c" not found!
	Inserted symbol "c".

(59) (INSERT SYMBOL)
	[Current Scope]:
	Symbol "i" not found!
	Inserted symbol "i".

(61) [Process Assign - ASSIGNMENT]
[Process ID - "tottington"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "tottington" (VARIABLE_STATIC)
[Process ID - "Feathers"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "Feathers" (PARAMETER)
[Check Binary Types]

(62) [Process Assign - ASSIGNMENT]
[Process ID - "moon"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "moon" (PARAMETER)
[Check Binary Types]

(62) [Process Binary - OPERATOR]
[Process ID - "McGraw"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "McGraw" (PARAMETER_ARRAY)
[Process ID - "Wensleydale"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "Wensleydale" (VARIABLE_ARRAY)
WARNING(62): Variable 'Wensleydale' may be uninitialized when used here.
[Check Binary Types]

(62) [Process ID - "moon"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "moon" (PARAMETER)

(63) [Process Assign - ASSIGNMENT]
[Process ID - "Wensleydale"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "Wensleydale" (VARIABLE_ARRAY)
[Process ID - "McGraw"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "McGraw" (PARAMETER_ARRAY)
[Check Binary Types]

(64) [Process Assign - ASSIGNMENT]
[Process ID Array - "Wensleydale"] -> [Process Array]
[Process ID - "Wensleydale"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "Wensleydale" (VARIABLE_ARRAY)
[Check Binary Types]

(64) [Process ID - "McGraw"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "McGraw" (PARAMETER_ARRAY)

(65) [Process Assign - ASSIGNMENT]
[Process ID Array - "McGraw"] -> [Process Array]
[Process ID - "McGraw"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "McGraw" (PARAMETER_ARRAY)
[Check Binary Types]
WARNING(58): The variable 'c' seems not to be used.
WARNING(54): The variable 'cheese' seems not to be used.
WARNING(59): The variable 'i' seems not to be used.
WARNING(54): The variable 'launch' seems not to be used.

##################################################################
(54) LEAVING SCOPE: FUNCTION_penguin
+----------------------------------------------------------------+
| SCOPE: "FUNCTION_penguin"                                      |
+----------------------------------------------------------------+
| PARAMETER => Feathers : char                                   |
| PARAMETER_ARRAY => McGraw : char                               |
| VARIABLE_ARRAY => Wensleydale : char                           |
| VARIABLE => c : char                                           |
| PARAMETER => cheese : bool                                     |
| VARIABLE => i : int                                            |
| PARAMETER => launch : int                                      |
| PARAMETER => moon : bool                                       |
| VARIABLE_STATIC => tottington : char                           |
+----------------------------------------------------------------+
##################################################################

(68) (INSERT SYMBOL)
	[Global Scope]:
	Symbol "Wendolene" not found!
	Inserted symbol "Wendolene".

******************************************************************
(68) ENTERING SCOPE: FUNCTION_Wendolene
******************************************************************

(68) (INSERT SYMBOL)
	[Current Scope]:
	Symbol "wool" not found!
	Inserted symbol "wool".

(68) (INSERT SYMBOL)
	[Current Scope]:
	Symbol "shaun" not found!
	Inserted symbol "shaun".

(68) (INSERT SYMBOL)
	[Current Scope]:
	Symbol "yarn" not found!
	Inserted symbol "yarn".

(68) (INSERT SYMBOL)
	[Current Scope]:
	Symbol "preston" not found!
	Inserted symbol "preston".

(70) (INSERT SYMBOL)
	[Current Scope]:
	Symbol "skein" not found!
	Inserted symbol "skein".

(71) [Process Assign - ASSIGNMENT]
[Process ID Array - "preston"] -> [Process Array]
[Process ID - "preston"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "preston" (PARAMETER_ARRAY)
[Check Binary Types]

(71) [Process Binary - OPERATOR]
[Process ID Array - "yarn"] -> [Process Array]
[Process ID - "yarn"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "yarn" (PARAMETER_ARRAY)
[Process ID - "wool"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "wool" (PARAMETER)
[Check Binary Types]

(71) [Operation: Unary - NOT] [Process ID - "shaun"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "shaun" (PARAMETER)
[Check Unary Types]

(72) [Process Return]
[Process Operator]
{LHS}
[Process Operator]
{LHS}
[Process Operator]
{LHS}
[Process Operator]
{LHS}
[Process ID - "wool"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "wool" (PARAMETER)
{RHS}
[Process ID Array - "yarn"] -> [Process Array]
[Process ID - "yarn"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "yarn" (PARAMETER_ARRAY)
[Check Binary Types]
{RHS}
[Check Binary Types]
{RHS}
[Process ID Array - "yarn"] -> [Process Array]
[Process ID - "yarn"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "yarn" (PARAMETER_ARRAY)
[Process Operator]
{LHS}
{RHS}
[Process ID - "wool"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "wool" (PARAMETER)
[Check Binary Types]
[Check Binary Types]
{RHS}
[Process ID Array - "yarn"] -> [Process Array]
[Process ID - "yarn"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "yarn" (PARAMETER_ARRAY)
[Process Operator]
{LHS}
[Process ID Array - "yarn"] -> [Process Array]
[Process ID - "yarn"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "yarn" (PARAMETER_ARRAY)
[Process Operator]
{LHS}
{RHS}
[Process Operator]
{LHS}
[Process ID - "wool"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "wool" (PARAMETER)
{RHS}
[Check Binary Types]
[Check Binary Types]
{RHS}
[Check Binary Types]
[Check Binary Types]

(72) [Process ID - "yarn"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "yarn" (PARAMETER_ARRAY)
WARNING(70): The variable 'skein' seems not to be used.

##################################################################
(68) LEAVING SCOPE: FUNCTION_Wendolene
+----------------------------------------------------------------+
| SCOPE: "FUNCTION_Wendolene"                                    |
+----------------------------------------------------------------+
| PARAMETER_ARRAY => preston : bool                              |
| PARAMETER => shaun : bool                                      |
| VARIABLE => skein : int                                        |
| PARAMETER => wool : int                                        |
| PARAMETER_ARRAY => yarn : int                                  |
+----------------------------------------------------------------+
##################################################################

(76) (INSERT SYMBOL)
	[Global Scope]:
	Symbol "ramsBottom" not found!
	Inserted symbol "ramsBottom".

******************************************************************
(76) ENTERING SCOPE: FUNCTION_ramsBottom
******************************************************************

(78) (INSERT SYMBOL)
	[Current Scope]:
	Symbol "chicken" not found!
	Inserted symbol "chicken".

(79) (INSERT SYMBOL)
	[Current Scope]:
	Symbol "run" not found!
	Inserted symbol "run".

(80) (INSERT SYMBOL)
	[Current Scope]:
	Symbol "wallace" not found!
	Inserted symbol "wallace".

(80) (INSERT SYMBOL)
	[Current Scope]:
	Symbol "gromit" not found!
	Inserted symbol "gromit".

(82) [Process Binary - OPERATOR]
[Process ID Call - "Wendolene"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol "Wendolene" not found!
	[Global Scope]:
	Symbol Found: "Wendolene" (FUNCTION)
[Check Binary Types]

(82) [Process Binary - OPERATOR]
[Check Binary Types]

(82) 
(82) 
(82) [Process Boolean Binary - OR]
[Check Binary Types]

(82) 
(82) 
(82) 
(82) [Process ID - "chicken"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "chicken" (VARIABLE_ARRAY)
WARNING(82): Variable 'chicken' may be uninitialized when used here.

(82) [Process ID - "run"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "run" (VARIABLE_ARRAY)
WARNING(82): Variable 'run' may be uninitialized when used here.

(83) [Process ID Array - "run"] -> [Process Array]
[Process ID - "run"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "run" (VARIABLE_ARRAY)
[Process Operator]
{LHS}
{RHS}
[Check Binary Types]

(83) [Process ID - "run"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "run" (VARIABLE_ARRAY)

(85) [Process Return]

(85) [Process Binary - OPERATOR]
[Process ID Array - "wallace"] -> [Process Array]
[Process ID - "wallace"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "wallace" (VARIABLE_ARRAY)
WARNING(85): Variable 'wallace' may be uninitialized when used here.
[Check Binary Types]

(85) [Operation: Unary - CHSIGN_UNARY] [Process ID Array - "gromit"] -> [Process Array]
[Process ID - "gromit"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "gromit" (VARIABLE_ARRAY)
WARNING(85): Variable 'gromit' may be uninitialized when used here.
[Check Unary Types]

(85) 
##################################################################
(76) LEAVING SCOPE: FUNCTION_ramsBottom
+----------------------------------------------------------------+
| SCOPE: "FUNCTION_ramsBottom"                                   |
+----------------------------------------------------------------+
| VARIABLE_ARRAY => chicken : int                                |
| VARIABLE_ARRAY => gromit : int                                 |
| VARIABLE_ARRAY => run : bool                                   |
| VARIABLE_ARRAY => wallace : int                                |
+----------------------------------------------------------------+
##################################################################

(88) (INSERT SYMBOL)
	[Global Scope]:
	Symbol "cheese" not found!
	Inserted symbol "cheese".

******************************************************************
(88) ENTERING SCOPE: FUNCTION_cheese
******************************************************************

(88) (INSERT SYMBOL)
	[Current Scope]:
	Symbol "x" not found!
	Inserted symbol "x".

(88) (INSERT SYMBOL)
	[Current Scope]:
	Symbol "y" not found!
	Inserted symbol "y".

(88) 
(88) [Process Binary - OPERATOR]
[Process ID - "x"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "x" (PARAMETER)
[Check Binary Types]

(88) 
(88) [Process Binary - OPERATOR]
[Process ID - "y"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "y" (PARAMETER)
[Check Binary Types]

(88) [Process Assign - ASSIGNMENT]
[Process ID - "x"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "x" (PARAMETER)
[Check Unary Types]

(88) [Process Return]
[Process Operator]
{LHS}
[Process Operator]
{LHS}
[Process ID - "x"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "x" (PARAMETER)
{RHS}
[Process ID - "x"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "x" (PARAMETER)
[Check Binary Types]
{RHS}
[Process ID - "y"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "y" (PARAMETER)
[Check Binary Types]

##################################################################
(88) LEAVING SCOPE: FUNCTION_cheese
+----------------------------------------------------------------+
| SCOPE: "FUNCTION_cheese"                                       |
+----------------------------------------------------------------+
| PARAMETER => x : int                                           |
| PARAMETER => y : int                                           |
+----------------------------------------------------------------+
##################################################################

(90) (INSERT SYMBOL)
	[Global Scope]:
	Symbol "Wensleydale" not found!
	Inserted symbol "Wensleydale".

******************************************************************
(90) ENTERING SCOPE: FUNCTION_Wensleydale
******************************************************************

(90) (INSERT SYMBOL)
	[Current Scope]:
	Symbol "x" not found!
	Inserted symbol "x".

(90) (INSERT SYMBOL)
	[Current Scope]:
	Symbol "y" not found!
	Inserted symbol "y".

(90) [Process Return]
[Process ID Call - "cheese"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol "cheese" not found!
	[Global Scope]:
	Symbol Found: "cheese" (FUNCTION)

(90) [Process ID - "x"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "x" (PARAMETER)

(90) [Process ID - "gromit"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol "gromit" not found!
	[Global Scope]:
	Symbol Found: "gromit" (VARIABLE)
WARNING(90): The variable 'y' seems not to be used.

##################################################################
(90) LEAVING SCOPE: FUNCTION_Wensleydale
+----------------------------------------------------------------+
| SCOPE: "FUNCTION_Wensleydale"                                  |
+----------------------------------------------------------------+
| PARAMETER => x : int                                           |
| PARAMETER => y : int                                           |
+----------------------------------------------------------------+
##################################################################

(92) (INSERT SYMBOL)
	[Global Scope]:
	Symbol "LadyCampanula" not found!
	Inserted symbol "LadyCampanula".

******************************************************************
(92) ENTERING SCOPE: FUNCTION_LadyCampanula
******************************************************************

(92) (INSERT SYMBOL)
	[Current Scope]:
	Symbol "c" not found!
	Inserted symbol "c".

(92) (INSERT SYMBOL)
	[Current Scope]:
	Symbol "s" not found!
	Inserted symbol "s".

(92) 
(92) 
******************************************************************
(92) ENTERING SCOPE: FOR_0
******************************************************************

(92) (INSERT SYMBOL)
	[Current Scope]:
	Symbol "i" not found!
	Inserted symbol "i".

(92) 
(92) [Process Binary - OPERATOR]
[Check Binary Types]

(92) [Process ID - "s"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol "s" not found!
	[Other Scope]:
	Symbol Found: "s" (PARAMETER_ARRAY)

(92) 
(92) [Operation: Unary - CHSIGN_UNARY] [Check Unary Types]

(92) 
(92) [Process Binary - OPERATOR]
[Process ID Array - "s"] -> [Process Array]
[Process ID - "s"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol "s" not found!
	[Other Scope]:
	Symbol Found: "s" (PARAMETER_ARRAY)
[Process ID - "i"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "i" (VARIABLE)
[Process ID - "c"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol "c" not found!
	[Other Scope]:
	Symbol Found: "c" (PARAMETER)
[Check Binary Types]

(92) [Process Return]
[Process ID - "i"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "i" (VARIABLE)

##################################################################
(92) LEAVING SCOPE: FOR_0
+----------------------------------------------------------------+
| SCOPE: "FOR_0"                                                 |
+----------------------------------------------------------------+
| VARIABLE => i : int                                            |
+----------------------------------------------------------------+
##################################################################

##################################################################
(92) LEAVING SCOPE: FUNCTION_LadyCampanula
+----------------------------------------------------------------+
| SCOPE: "FUNCTION_LadyCampanula"                                |
+----------------------------------------------------------------+
| PARAMETER => c : char                                          |
| PARAMETER_ARRAY => s : char                                    |
+----------------------------------------------------------------+
##################################################################

(95) (INSERT SYMBOL)
	[Global Scope]:
	Symbol "MrsTweedy" not found!
	Inserted symbol "MrsTweedy".

******************************************************************
(95) ENTERING SCOPE: FUNCTION_MrsTweedy
******************************************************************

(95) (INSERT SYMBOL)
	[Current Scope]:
	Symbol "c" not found!
	Inserted symbol "c".

(95) (INSERT SYMBOL)
	[Current Scope]:
	Symbol "s" not found!
	Inserted symbol "s".

******************************************************************
(97) ENTERING SCOPE: FOR_0
******************************************************************

(97) (INSERT SYMBOL)
	[Current Scope]:
	Symbol "ginger" not found!
	Inserted symbol "ginger".

(97) 
(97) 
(97) 
(97) [Process Assign - ASSIGNMENT]
[Process ID Array - "s"] -> [Process Array]
[Process ID - "s"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol "s" not found!
	[Other Scope]:
	Symbol Found: "s" (PARAMETER_ARRAY)
[Process ID - "ginger"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "ginger" (VARIABLE)
[Process ID - "c"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol "c" not found!
	[Other Scope]:
	Symbol Found: "c" (PARAMETER)
[Check Binary Types]

##################################################################
(97) LEAVING SCOPE: FOR_0
+----------------------------------------------------------------+
| SCOPE: "FOR_0"                                                 |
+----------------------------------------------------------------+
| VARIABLE => ginger : int                                       |
+----------------------------------------------------------------+
##################################################################

******************************************************************
(98) ENTERING SCOPE: FOR_0
******************************************************************

(98) (INSERT SYMBOL)
	[Current Scope]:
	Symbol "pastry" not found!
	Inserted symbol "pastry".

(98) 
(98) 
(98) 
(98) 
(98) 
(98) [Process Binary - OPERATOR]
[Process ID Array - "s"] -> [Process Array]
[Process ID - "s"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol "s" not found!
	[Other Scope]:
	Symbol Found: "s" (PARAMETER_ARRAY)
[Process ID Array - "s"] -> [Process Array]
[Process ID - "s"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol "s" not found!
	[Other Scope]:
	Symbol Found: "s" (PARAMETER_ARRAY)
[Check Binary Types]

(98) WARNING(98): The variable 'pastry' seems not to be used.

##################################################################
(98) LEAVING SCOPE: FOR_0
+----------------------------------------------------------------+
| SCOPE: "FOR_0"                                                 |
+----------------------------------------------------------------+
| VARIABLE => pastry : int                                       |
+----------------------------------------------------------------+
##################################################################

(99) 
(99) 
(99) 
(101) [Process Return]

##################################################################
(95) LEAVING SCOPE: FUNCTION_MrsTweedy
+----------------------------------------------------------------+
| SCOPE: "FUNCTION_MrsTweedy"                                    |
+----------------------------------------------------------------+
| PARAMETER => c : char                                          |
| PARAMETER_ARRAY => s : char                                    |
+----------------------------------------------------------------+
##################################################################

(104) (INSERT SYMBOL)
	[Global Scope]:
	Symbol "TheWereRabbit" not found!
	Inserted symbol "TheWereRabbit".

******************************************************************
(104) ENTERING SCOPE: FUNCTION_TheWereRabbit
******************************************************************

(104) (INSERT SYMBOL)
	[Current Scope]:
	Symbol "x" not found!
	Inserted symbol "x".

(106) 
(106) [Process Binary - OPERATOR]
[Process ID - "x"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "x" (PARAMETER)
[Check Binary Types]

(106) [Process Return]

(107) 
(107) [Process Binary - OPERATOR]
[Process ID - "x"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "x" (PARAMETER)
[Check Binary Types]

(107) [Process Return]

(108) 
(108) [Process Binary - OPERATOR]
[Process ID - "x"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "x" (PARAMETER)
[Check Binary Types]

(108) [Process Return]

(109) 
(109) [Process Binary - OPERATOR]
[Process ID - "x"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "x" (PARAMETER)
[Check Binary Types]

(109) [Process Return]

(110) 
(110) [Process Binary - OPERATOR]
[Process ID - "x"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "x" (PARAMETER)
[Check Binary Types]

(110) [Process Return]

(111) [Process Return]

##################################################################
(104) LEAVING SCOPE: FUNCTION_TheWereRabbit
+----------------------------------------------------------------+
| SCOPE: "FUNCTION_TheWereRabbit"                                |
+----------------------------------------------------------------+
| PARAMETER => x : int                                           |
+----------------------------------------------------------------+
##################################################################

(114) (INSERT SYMBOL)
	[Global Scope]:
	Symbol "main" not found!
	Inserted symbol "main".

******************************************************************
(114) ENTERING SCOPE: FUNCTION_main
******************************************************************

(116) (INSERT SYMBOL)
	[Current Scope]:
	Symbol "wool" not found!
	Inserted symbol "wool".

(116) (INSERT SYMBOL)
	[Current Scope]:
	Symbol "yarn" not found!
	Inserted symbol "yarn".

(117) (INSERT SYMBOL)
	[Current Scope]:
	Symbol "shaun" not found!
	Inserted symbol "shaun".

(117) (INSERT SYMBOL)
	[Current Scope]:
	Symbol "preston" not found!
	Inserted symbol "preston".

(118) (INSERT SYMBOL)
	[Current Scope]:
	Symbol "rocky" not found!
	Inserted symbol "rocky".

(120) [Process ID Call - "wallace"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol "wallace" not found!
	[Global Scope]:
	Symbol Found: "wallace" (FUNCTION)

(120) [Process ID Call - "cheese"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol "cheese" not found!
	[Global Scope]:
	Symbol Found: "cheese" (FUNCTION)

(120) 
(120) [Operation: Unary - CHSIGN_UNARY] [Check Unary Types]

(120) [Process ID - "gromit"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol "gromit" not found!
	[Global Scope]:
	Symbol Found: "gromit" (VARIABLE)

(121) [Process Assign - ASSIGNMENT]
[Process ID - "rocky"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "rocky" (VARIABLE_ARRAY)
[Check Binary Types]

(123) [Process ID Call - "MrsTweedy"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol "MrsTweedy" not found!
	[Global Scope]:
	Symbol Found: "MrsTweedy" (FUNCTION)

(123) 
(123) [Process ID - "rocky"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "rocky" (VARIABLE_ARRAY)

(125) [Process Binary - OPERATOR]
[Process ID Array - "yarn"] -> [Process Array]
[Process ID - "yarn"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "yarn" (VARIABLE_ARRAY)
WARNING(125): Variable 'yarn' may be uninitialized when used here.
[Process ID Array - "yarn"] -> [Process Array]
[Process ID - "yarn"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "yarn" (VARIABLE_ARRAY)
[Check Binary Types]

(125) 
(125) [Operation: Unary - SIZEOF_UNARY] [Process ID - "yarn"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "yarn" (VARIABLE_ARRAY)
[Check Unary Types]

(127) [Process Return]
[Process ID Call - "Wendolene"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol "Wendolene" not found!
	[Global Scope]:
	Symbol Found: "Wendolene" (FUNCTION)

(127) [Process Binary - OPERATOR]
[Check Binary Types]

(127) [Process ID - "preston"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "preston" (VARIABLE_ARRAY)
WARNING(127): Variable 'preston' may be uninitialized when used here.

(127) [Process ID - "yarn"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "yarn" (VARIABLE_ARRAY)

(127) [Process ID - "shaun"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "shaun" (VARIABLE)
WARNING(127): Variable 'shaun' may be uninitialized when used here.

(127) [Process ID - "yarn"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "yarn" (VARIABLE_ARRAY)

(127) [Process ID - "preston"] -> (LOOKUP DECLARATION)
	[Current Scope]:
	Symbol Found: "preston" (VARIABLE_ARRAY)
WARNING(116): The variable 'wool' seems not to be used.

##################################################################
(114) LEAVING SCOPE: FUNCTION_main
+----------------------------------------------------------------+
| SCOPE: "FUNCTION_main"                                         |
+----------------------------------------------------------------+
| VARIABLE_ARRAY => preston : bool                               |
| VARIABLE_ARRAY => rocky : char                                 |
| VARIABLE => shaun : bool                                       |
| VARIABLE => wool : int                                         |
| VARIABLE_ARRAY => yarn : int                                   |
+----------------------------------------------------------------+
##################################################################

(130) (INSERT SYMBOL)
	[Global Scope]:
	Symbol "aBigLongVariableName6andthx1138" not found!
	Inserted symbol "aBigLongVariableName6andthx1138".

(131) (INSERT SYMBOL)
	[Global Scope]:
	Symbol "odd" not found!
	Inserted symbol "odd".

(131) (INSERT SYMBOL)
	[Global Scope]:
	Symbol "separation" not found!
	Inserted symbol "separation".

(131) (INSERT SYMBOL)
	[Global Scope]:
	Symbol "of" not found!
	Inserted symbol "of".

(132) (INSERT SYMBOL)
	[Global Scope]:
	Symbol "stuff" not found!
	Inserted symbol "stuff".

(134) (INSERT SYMBOL)
	[Global Scope]:
	Symbol "ant" not found!
	Inserted symbol "ant".
	[Has Initializer]

(135) (INSERT SYMBOL)
	[Global Scope]:
	Symbol "bat" not found!
	Inserted symbol "bat".
	[Has Initializer]

(136) (INSERT SYMBOL)
	[Global Scope]:
	Symbol "cat" not found!
	Inserted symbol "cat".
	[Has Initializer]

(137) (INSERT SYMBOL)
	[Global Scope]:
	Symbol "dog" not found!
	Inserted symbol "dog".
	[Has Initializer]

(138) (INSERT SYMBOL)
	[Global Scope]:
	Symbol "hog" not found!
	Inserted symbol "hog".
	[Has Initializer]

##################################################################
(0) LEAVING SCOPE: GLOBAL
+----------------------------------------------------------------+
| SCOPE: "GLOBAL"                                                |
+----------------------------------------------------------------+
| FUNCTION => LadyCampanula : int                                |
| FUNCTION => MrsTweedy : char                                   |
| FUNCTION => TheWereRabbit : char                               |
| FUNCTION => Wendolene : int                                    |
| FUNCTION => Wensleydale : int                                  |
| VARIABLE => aBigLongVariableName6andthx1138 : bool             |
| VARIABLE_ARRAY => ant : char                                   |
| VARIABLE => bat : char                                         |
| VARIABLE => cat : char                                         |
| FUNCTION => cheese : int                                       |
| VARIABLE => dog : char                                         |
| VARIABLE => gromit : int                                       |
| VARIABLE => hog : char                                         |
| FUNCTION => main : int                                         |
| VARIABLE => mysteriousPenguin : int                            |
| VARIABLE => odd : int                                          |
| VARIABLE => of : int                                           |
| FUNCTION => penguin : bool                                     |
| FUNCTION => ramsBottom : bool                                  |
| VARIABLE => separation : int                                   |
| VARIABLE => stuff : int                                        |
| FUNCTION => wallace : void                                     |
+----------------------------------------------------------------+
##################################################################

Abstract Syntax Tree:

Var: gromit of type int [line: 6]
Sibling: 1  Var: mysteriousPenguin of type int [line: 6]
Sibling: 2  Func: wallace returns type void [line: 9]
.   Child: 0  Parm: wrong of type int [line: 9]
.   Sibling: 1  Parm: trousers of type int [line: 9]
.   Child: 1  Compound [line: 10]
.   .   Child: 0  Var: close of type bool [line: 11]
.   .   .   Child: 0  Const true of type bool [line: 11]
.   .   Sibling: 1  Var: shave of type bool [line: 11]
.   .   .   Child: 0  Const false of type bool [line: 11]
.   .   Sibling: 2  Var: cheese of type int [line: 12]
.   .   .   Child: 0  Const 17 of type int [line: 12]
.   .   Child: 1  Const 1729 of type int [line: 14]
.   .   Sibling: 1  Id: close of type bool [line: 15]
.   .   Sibling: 2  Op: + of type int [line: 16]
.   .   .   Child: 0  Op: * of type int [line: 16]
.   .   .   .   Child: 0  Const 11 of type int [line: 16]
.   .   .   .   Child: 1  Const 22 of type int [line: 16]
.   .   .   Child: 1  Op: * of type int [line: 16]
.   .   .   .   Child: 0  Const 33 of type int [line: 16]
.   .   .   .   Child: 1  Const 44 of type int [line: 16]
.   .   Sibling: 3  Assign: := of type bool [line: 17]
.   .   .   Child: 0  Id: close of type bool [line: 17]
.   .   .   Child: 1  Id: shave of type bool [line: 17]
.   .   Sibling: 4  Assign: := of type int [line: 18]
.   .   .   Child: 0  Id: wrong of type int [line: 18]
.   .   .   Child: 1  Op: % of type int [line: 18]
.   .   .   .   Child: 0  Id: trousers of type int [line: 18]
.   .   .   .   Child: 1  Op: / of type int [line: 18]
.   .   .   .   .   Child: 0  Const 666 of type int [line: 18]
.   .   .   .   .   Child: 1  Id: wrong of type int [line: 18]
.   .   Sibling: 5  Assign: := of type int [line: 19]
.   .   .   Child: 0  Id: gromit of type int [line: 19]
.   .   .   Child: 1  Op: + of type int [line: 19]
.   .   .   .   Child: 0  Op: - of type int [line: 19]
.   .   .   .   .   Child: 0  Op: * of type int [line: 19]
.   .   .   .   .   .   Child: 0  Id: wrong of type int [line: 19]
.   .   .   .   .   .   Child: 1  Id: trousers of type int [line: 19]
.   .   .   .   .   Child: 1  Id: gromit of type int [line: 19]
.   .   .   .   Child: 1  Op: chsign of type int [line: 19]
.   .   .   .   .   Child: 0  Const 42 of type int [line: 19]
.   .   Sibling: 6  Assign: += of type int [line: 20]
.   .   .   Child: 0  Id: gromit of type int [line: 20]
.   .   .   Child: 1  Const 27182818 of type int [line: 20]
.   .   Sibling: 7  Assign: -= of type int [line: 21]
.   .   .   Child: 0  Id: gromit of type int [line: 21]
.   .   .   Child: 1  Op: chsign of type int [line: 21]
.   .   .   .   Child: 0  Const 31415927 of type int [line: 21]
.   .   Sibling: 8  Assign: /= of type int [line: 22]
.   .   .   Child: 0  Id: gromit of type int [line: 22]
.   .   .   Child: 1  Assign: *= of type int [line: 22]
.   .   .   .   Child: 0  Id: wrong of type int [line: 22]
.   .   .   .   Child: 1  Const 42 of type int [line: 22]
.   .   Sibling: 9  Assign: := of type bool [line: 23]
.   .   .   Child: 0  Id: close of type bool [line: 23]
.   .   .   Child: 1  Op: and of type bool [line: 23]
.   .   .   .   Child: 0  Op: < of type bool [line: 23]
.   .   .   .   .   Child: 0  Id: wrong of type int [line: 23]
.   .   .   .   .   Child: 1  Id: trousers of type int [line: 23]
.   .   .   .   Child: 1  Op: <= of type bool [line: 23]
.   .   .   .   .   Child: 0  Id: trousers of type int [line: 23]
.   .   .   .   .   Child: 1  Id: gromit of type int [line: 23]
.   .   Sibling: 10  Assign: := of type bool [line: 24]
.   .   .   Child: 0  Id: shave of type bool [line: 24]
.   .   .   Child: 1  Op: and of type bool [line: 24]
.   .   .   .   Child: 0  Op: > of type bool [line: 24]
.   .   .   .   .   Child: 0  Id: wrong of type int [line: 24]
.   .   .   .   .   Child: 1  Id: trousers of type int [line: 24]
.   .   .   .   Child: 1  Op: >= of type bool [line: 24]
.   .   .   .   .   Child: 0  Id: trousers of type int [line: 24]
.   .   .   .   .   Child: 1  Id: gromit of type int [line: 24]
.   .   Sibling: 11  Compound [line: 25]
.   .   .   Child: 0  Var: a of type int [line: 26]
.   .   .   Sibling: 1  Var: grand of type int [line: 26]
.   .   .   .   Child: 0  Op: / of type int [line: 26]
.   .   .   .   .   Child: 0  Const 1 of type int [line: 26]
.   .   .   .   .   Child: 1  Const 2 of type int [line: 26]
.   .   .   Sibling: 2  Var: day of type int [line: 26]
.   .   .   .   Child: 0  Op: * of type int [line: 26]
.   .   .   .   .   Child: 0  Const 3 of type int [line: 26]
.   .   .   .   .   Child: 1  Const 4 of type int [line: 26]
.   .   .   Sibling: 3  Var: out of type int [line: 26]
.   .   .   .   Child: 0  Op: chsign of type int [line: 26]
.   .   .   .   .   Child: 0  Const 9 of type int [line: 26]
.   .   .   Child: 1  Assign: := of type int [line: 27]
.   .   .   .   Child: 0  Id: a of type int [line: 27]
.   .   .   .   Child: 1  Assign: += of type int [line: 27]
.   .   .   .   .   Child: 0  Id: grand of type int [line: 27]
.   .   .   .   .   Child: 1  Assign: -= of type int [line: 27]
.   .   .   .   .   .   Child: 0  Id: day of type int [line: 27]
.   .   .   .   .   .   Child: 1  Id: out of type int [line: 27]
.   .   Sibling: 12  Assign: := of type bool [line: 29]
.   .   .   Child: 0  Id: close of type bool [line: 29]
.   .   .   Child: 1  Op: and of type bool [line: 29]
.   .   .   .   Child: 0  Op: < of type bool [line: 29]
.   .   .   .   .   Child: 0  Op: + of type int [line: 29]
.   .   .   .   .   .   Child: 0  Op: * of type int [line: 29]
.   .   .   .   .   .   .   Child: 0  Op: chsign of type int [line: 29]
.   .   .   .   .   .   .   .   Child: 0  Const 1 of type int [line: 29]
.   .   .   .   .   .   .   Child: 1  Const 2 of type int [line: 29]
.   .   .   .   .   .   Child: 1  Const 3 of type int [line: 29]
.   .   .   .   .   Child: 1  Op: * of type int [line: 29]
.   .   .   .   .   .   Child: 0  Const 4 of type int [line: 29]
.   .   .   .   .   .   Child: 1  Const 5 of type int [line: 29]
.   .   .   .   Child: 1  Op: > of type bool [line: 29]
.   .   .   .   .   Child: 0  Op: + of type int [line: 29]
.   .   .   .   .   .   Child: 0  Const 6 of type int [line: 29]
.   .   .   .   .   .   Child: 1  Const 7 of type int [line: 29]
.   .   .   .   .   Child: 1  Op: chsign of type int [line: 29]
.   .   .   .   .   .   Child: 0  Const 3 of type int [line: 29]
.   .   Sibling: 13  Assign: := of type bool [line: 30]
.   .   .   Child: 0  Id: shave of type bool [line: 30]
.   .   .   Child: 1  Op: or of type bool [line: 30]
.   .   .   .   Child: 0  Const true of type bool [line: 30]
.   .   .   .   Child: 1  Op: and of type bool [line: 30]
.   .   .   .   .   Child: 0  Op: < of type bool [line: 30]
.   .   .   .   .   .   Child: 0  Op: chsign of type int [line: 30]
.   .   .   .   .   .   .   Child: 0  Op: * of type int [line: 30]
.   .   .   .   .   .   .   .   Child: 0  Const 1 of type int [line: 30]
.   .   .   .   .   .   .   .   Child: 1  Op: + of type int [line: 30]
.   .   .   .   .   .   .   .   .   Child: 0  Const 2 of type int [line: 30]
.   .   .   .   .   .   .   .   .   Child: 1  Const 3 of type int [line: 30]
.   .   .   .   .   .   Child: 1  Op: * of type int [line: 30]
.   .   .   .   .   .   .   Child: 0  Const 4 of type int [line: 30]
.   .   .   .   .   .   .   Child: 1  Const 5 of type int [line: 30]
.   .   .   .   .   Child: 1  Op: > of type bool [line: 30]
.   .   .   .   .   .   Child: 0  Op: + of type int [line: 30]
.   .   .   .   .   .   .   Child: 0  Const 6 of type int [line: 30]
.   .   .   .   .   .   .   Child: 1  Const 7 of type int [line: 30]
.   .   .   .   .   .   Child: 1  Op: chsign of type int [line: 30]
.   .   .   .   .   .   .   Child: 0  Const 3 of type int [line: 30]
.   .   Sibling: 14  If [line: 31]
.   .   .   Child: 0  Op: >< of type bool [line: 31]
.   .   .   .   Child: 0  Id: shave of type bool [line: 31]
.   .   .   .   Child: 1  Id: close of type bool [line: 31]
.   .   .   Child: 1  Assign: := of type bool [line: 31]
.   .   .   .   Child: 0  Id: shave of type bool [line: 31]
.   .   .   .   Child: 1  Op: not of type bool [line: 31]
.   .   .   .   .   Child: 0  Id: close of type bool [line: 31]
.   .   Sibling: 15  If [line: 32]
.   .   .   Child: 0  Op: not of type bool [line: 32]
.   .   .   .   Child: 0  Op: or of type bool [line: 32]
.   .   .   .   .   Child: 0  Op: = of type bool [line: 32]
.   .   .   .   .   .   Child: 0  Id: shave of type bool [line: 32]
.   .   .   .   .   .   Child: 1  Id: close of type bool [line: 32]
.   .   .   .   .   Child: 1  Op: not of type bool [line: 32]
.   .   .   .   .   .   Child: 0  Id: close of type bool [line: 32]
.   .   .   Child: 1  Assign: := of type bool [line: 32]
.   .   .   .   Child: 0  Id: shave of type bool [line: 32]
.   .   .   .   Child: 1  Const true of type bool [line: 32]
.   .   .   Child: 2  Assign: := of type bool [line: 33]
.   .   .   .   Child: 0  Id: close of type bool [line: 33]
.   .   .   .   Child: 1  Const false of type bool [line: 33]
.   .   Sibling: 16  Assign: := of type int [line: 34]
.   .   .   Child: 0  Id: mysteriousPenguin of type int [line: 34]
.   .   .   Child: 1  Op: chsign of type int [line: 34]
.   .   .   .   Child: 0  Op: - of type int [line: 34]
.   .   .   .   .   Child: 0  Op: chsign of type int [line: 34]
.   .   .   .   .   .   Child: 0  Op: chsign of type int [line: 34]
.   .   .   .   .   .   .   Child: 0  Const 8 of type int [line: 34]
.   .   .   .   .   Child: 1  Op: chsign of type int [line: 34]
.   .   .   .   .   .   Child: 0  Assign: -- of type int [line: 34]
.   .   .   .   .   .   .   Child: 0  Id: cheese of type int [line: 34]
.   .   Sibling: 17  While [line: 36]
.   .   .   Child: 0  Id: shave of type bool [line: 36]
.   .   .   Child: 1  Compound [line: 36]
.   .   .   .   Child: 0  Var: were of type int [line: 37]
.   .   .   .   Sibling: 1  Var: rabbit of type int [line: 37]
.   .   .   .   Sibling: 2  Var: sheep is array of type int [line: 38]
.   .   .   .   Child: 1  Assign: := of type int [line: 40]
.   .   .   .   .   Child: 0  Op: [ of type int [line: 40]
.   .   .   .   .   .   Child: 0  Id: sheep of type int [line: 40]
.   .   .   .   .   .   Child: 1  Const 2 of type int [line: 40]
.   .   .   .   .   Child: 1  Const 1618 of type int [line: 40]
.   .   .   .   Sibling: 1  If [line: 41]
.   .   .   .   .   Child: 0  Op: < of type bool [line: 41]
.   .   .   .   .   .   Child: 0  Op: [ of type int [line: 41]
.   .   .   .   .   .   .   Child: 0  Id: sheep of type int [line: 41]
.   .   .   .   .   .   .   Child: 1  Const 2 of type int [line: 41]
.   .   .   .   .   .   Child: 1  Const 496 of type int [line: 41]
.   .   .   .   .   Child: 1  Break [line: 41]
.   .   .   .   Sibling: 2  Call: wallace of type void [line: 42]
.   .   .   .   .   Child: 0  Assign: -- of type int [line: 42]
.   .   .   .   .   .   Child: 0  Id: gromit of type int [line: 42]
.   .   .   .   .   Sibling: 1  Op: - of type int [line: 42]
.   .   .   .   .   .   Child: 0  Id: were of type int [line: 42]
.   .   .   .   .   .   Child: 1  Id: rabbit of type int [line: 42]
.   .   .   .   Sibling: 3  Compound [line: 43]
.   .   .   .   .   Child: 0  Var: the of type int [line: 44]
.   .   .   .   .   Sibling: 1  Var: wrong of type int [line: 44]
.   .   .   .   .   Sibling: 2  Var: trousers of type int [line: 44]
.   .   .   .   .   Child: 1  Assign: := of type int [line: 46]
.   .   .   .   .   .   Child: 0  Id: the of type int [line: 46]
.   .   .   .   .   .   Child: 1  Assign: += of type int [line: 46]
.   .   .   .   .   .   .   Child: 0  Id: wrong of type int [line: 46]
.   .   .   .   .   .   .   Child: 1  Assign: ++ of type int [line: 46]
.   .   .   .   .   .   .   .   Child: 0  Id: trousers of type int [line: 46]
.   .   .   .   .   Sibling: 1  If [line: 47]
.   .   .   .   .   .   Child: 0  Op: = of type bool [line: 47]
.   .   .   .   .   .   .   Child: 0  Id: were of type int [line: 47]
.   .   .   .   .   .   .   Child: 1  Id: rabbit of type int [line: 47]
.   .   .   .   .   .   Child: 1  Assign: := of type int [line: 47]
.   .   .   .   .   .   .   Child: 0  Id: were of type int [line: 47]
.   .   .   .   .   .   .   Child: 1  Assign: -- of type int [line: 47]
.   .   .   .   .   .   .   .   Child: 0  Id: wrong of type int [line: 47]
.   .   Sibling: 18  Return [line: 50]
Sibling: 3  Func: penguin returns type bool [line: 54]
.   Child: 0  Parm: Feathers of type char [line: 54]
.   Sibling: 1  Parm: McGraw is array of type char [line: 54]
.   Sibling: 2  Parm: moon of type bool [line: 54]
.   Sibling: 3  Parm: cheese of type bool [line: 54]
.   Sibling: 4  Parm: launch of type int [line: 54]
.   Child: 1  Compound [line: 55]
.   .   Child: 0  Var: tottington of type char [line: 56]
.   .   .   Child: 0  Const 'x' of type char [line: 56]
.   .   Sibling: 1  Var: Wensleydale is array of type char [line: 57]
.   .   Sibling: 2  Var: c of type char [line: 58]
.   .   Sibling: 3  Var: i of type int [line: 59]
.   .   Child: 1  Assign: := of type char [line: 61]
.   .   .   Child: 0  Id: tottington of type char [line: 61]
.   .   .   Child: 1  Id: Feathers of type char [line: 61]
.   .   Sibling: 1  Assign: := of type bool [line: 62]
.   .   .   Child: 0  Id: moon of type bool [line: 62]
.   .   .   Child: 1  Op: and of type bool [line: 62]
.   .   .   .   Child: 0  Op: <= of type bool [line: 62]
.   .   .   .   .   Child: 0  Id: McGraw of type char [line: 62]
.   .   .   .   .   Child: 1  Id: Wensleydale of type char [line: 62]
.   .   .   .   Child: 1  Id: moon of type bool [line: 62]
.   .   Sibling: 2  Assign: := of type char [line: 63]
.   .   .   Child: 0  Id: Wensleydale of type char [line: 63]
.   .   .   Child: 1  Id: McGraw of type char [line: 63]
.   .   Sibling: 3  Assign: := of type char [line: 64]
.   .   .   Child: 0  Op: [ of type char [line: 64]
.   .   .   .   Child: 0  Id: Wensleydale of type char [line: 64]
.   .   .   .   Child: 1  Op: sizeof of type int [line: 64]
.   .   .   .   .   Child: 0  Id: McGraw of type char [line: 64]
.   .   .   Child: 1  Const 'Q' of type char [line: 64]
.   .   Sibling: 4  Assign: := of type char [line: 65]
.   .   .   Child: 0  Op: [ of type char [line: 65]
.   .   .   .   Child: 0  Id: McGraw of type char [line: 65]
.   .   .   .   Child: 1  Const 3 of type int [line: 65]
.   .   .   Child: 1  Const 'A' of type char [line: 65]
Sibling: 4  Func: Wendolene returns type int [line: 68]
.   Child: 0  Parm: wool of type int [line: 68]
.   Sibling: 1  Parm: shaun of type bool [line: 68]
.   Sibling: 2  Parm: yarn is array of type int [line: 68]
.   Sibling: 3  Parm: preston is array of type bool [line: 68]
.   Child: 1  Compound [line: 69]
.   .   Child: 0  Var: skein of type int [line: 70]
.   .   Child: 1  Assign: := of type bool [line: 71]
.   .   .   Child: 0  Op: [ of type bool [line: 71]
.   .   .   .   Child: 0  Id: preston of type bool [line: 71]
.   .   .   .   Child: 1  Const 3 of type int [line: 71]
.   .   .   Child: 1  Op: or of type bool [line: 71]
.   .   .   .   Child: 0  Op: > of type bool [line: 71]
.   .   .   .   .   Child: 0  Op: [ of type int [line: 71]
.   .   .   .   .   .   Child: 0  Id: yarn of type int [line: 71]
.   .   .   .   .   .   Child: 1  Const 1 of type int [line: 71]
.   .   .   .   .   Child: 1  Id: wool of type int [line: 71]
.   .   .   .   Child: 1  Op: not of type bool [line: 71]
.   .   .   .   .   Child: 0  Id: shaun of type bool [line: 71]
.   .   Sibling: 1  Return [line: 72]
.   .   .   Child: 0  Op: + of type int [line: 72]
.   .   .   .   Child: 0  Op: + of type int [line: 72]
.   .   .   .   .   Child: 0  Op: + of type int [line: 72]
.   .   .   .   .   .   Child: 0  Op: + of type int [line: 72]
.   .   .   .   .   .   .   Child: 0  Id: wool of type int [line: 72]
.   .   .   .   .   .   .   Child: 1  Op: [ of type int [line: 72]
.   .   .   .   .   .   .   .   Child: 0  Id: yarn of type int [line: 72]
.   .   .   .   .   .   .   .   Child: 1  Const 0 of type int [line: 72]
.   .   .   .   .   .   Child: 1  Op: sizeof of type int [line: 72]
.   .   .   .   .   .   .   Child: 0  Id: yarn of type int [line: 72]
.   .   .   .   .   Child: 1  Op: [ of type int [line: 72]
.   .   .   .   .   .   Child: 0  Id: yarn of type int [line: 72]
.   .   .   .   .   .   Child: 1  Op: * of type int [line: 72]
.   .   .   .   .   .   .   Child: 0  Const 7 of type int [line: 72]
.   .   .   .   .   .   .   Child: 1  Id: wool of type int [line: 72]
.   .   .   .   Child: 1  Op: [ of type int [line: 72]
.   .   .   .   .   Child: 0  Id: yarn of type int [line: 72]
.   .   .   .   .   Child: 1  Op: - of type int [line: 72]
.   .   .   .   .   .   Child: 0  Op: [ of type int [line: 72]
.   .   .   .   .   .   .   Child: 0  Id: yarn of type int [line: 72]
.   .   .   .   .   .   .   Child: 1  Op: + of type int [line: 72]
.   .   .   .   .   .   .   .   Child: 0  Const 3 of type int [line: 72]
.   .   .   .   .   .   .   .   Child: 1  Op: * of type int [line: 72]
.   .   .   .   .   .   .   .   .   Child: 0  Id: wool of type int [line: 72]
.   .   .   .   .   .   .   .   .   Child: 1  Const 2 of type int [line: 72]
.   .   .   .   .   .   Child: 1  Const 4 of type int [line: 72]
Sibling: 5  Func: ramsBottom returns type bool [line: 76]
.   Child: 1  Compound [line: 77]
.   .   Child: 0  Var: chicken is array of type int [line: 78]
.   .   Sibling: 1  Var: run is array of type bool [line: 79]
.   .   Sibling: 2  Var: wallace is array of type int [line: 80]
.   .   Sibling: 3  Var: gromit is array of type int [line: 80]
.   .   Child: 1  Op: * of type int [line: 82]
.   .   .   Child: 0  Const 42 of type int [line: 82]
.   .   .   Child: 1  Call: Wendolene of type int [line: 82]
.   .   .   .   Child: 0  Op: + of type int [line: 82]
.   .   .   .   .   Child: 0  Op: + of type int [line: 82]
.   .   .   .   .   .   Child: 0  Const 1 of type int [line: 82]
.   .   .   .   .   .   Child: 1  Const 2 of type int [line: 82]
.   .   .   .   .   Child: 1  Const 3 of type int [line: 82]
.   .   .   .   Sibling: 1  Op: or of type bool [line: 82]
.   .   .   .   .   Child: 0  Op: not of type bool [line: 82]
.   .   .   .   .   .   Child: 0  Const true of type bool [line: 82]
.   .   .   .   .   Child: 1  Op: and of type bool [line: 82]
.   .   .   .   .   .   Child: 0  Const true of type bool [line: 82]
.   .   .   .   .   .   Child: 1  Const false of type bool [line: 82]
.   .   .   .   Sibling: 2  Id: chicken of type int [line: 82]
.   .   .   .   Sibling: 3  Id: run of type bool [line: 82]
.   .   Sibling: 1  Op: [ of type bool [line: 83]
.   .   .   Child: 0  Id: run of type bool [line: 83]
.   .   .   Child: 1  Op: - of type int [line: 83]
.   .   .   .   Child: 0  Op: sizeof of type int [line: 83]
.   .   .   .   .   Child: 0  Id: run of type bool [line: 83]
.   .   .   .   Child: 1  Const 1 of type int [line: 83]
.   .   Sibling: 2  Return [line: 85]
.   .   .   Child: 0  Op: not of type bool [line: 85]
.   .   .   .   Child: 0  Op: >= of type bool [line: 85]
.   .   .   .   .   Child: 0  Op: [ of type int [line: 85]
.   .   .   .   .   .   Child: 0  Id: wallace of type int [line: 85]
.   .   .   .   .   .   Child: 1  Const 1 of type int [line: 85]
.   .   .   .   .   Child: 1  Op: * of type int [line: 85]
.   .   .   .   .   .   Child: 0  Op: chsign of type int [line: 85]
.   .   .   .   .   .   .   Child: 0  Op: [ of type int [line: 85]
.   .   .   .   .   .   .   .   Child: 0  Id: gromit of type int [line: 85]
.   .   .   .   .   .   .   .   Child: 1  Const 2 of type int [line: 85]
.   .   .   .   .   .   Child: 1  Const 3 of type int [line: 85]
Sibling: 6  Func: cheese returns type int [line: 88]
.   Child: 0  Parm: x of type int [line: 88]
.   Sibling: 1  Parm: y of type int [line: 88]
.   Child: 1  Compound [line: 88]
.   .   Child: 1  While [line: 88]
.   .   .   Child: 0  Op: > of type bool [line: 88]
.   .   .   .   Child: 0  Id: x of type int [line: 88]
.   .   .   .   Child: 1  Const 0 of type int [line: 88]
.   .   .   Child: 1  If [line: 88]
.   .   .   .   Child: 0  Op: > of type bool [line: 88]
.   .   .   .   .   Child: 0  Id: y of type int [line: 88]
.   .   .   .   .   Child: 1  Const 3 of type int [line: 88]
.   .   .   .   Child: 1  Assign: -- of type int [line: 88]
.   .   .   .   .   Child: 0  Id: x of type int [line: 88]
.   .   .   .   Child: 2  Return [line: 88]
.   .   .   .   .   Child: 0  Op: % of type int [line: 88]
.   .   .   .   .   .   Child: 0  Op: * of type int [line: 88]
.   .   .   .   .   .   .   Child: 0  Id: x of type int [line: 88]
.   .   .   .   .   .   .   Child: 1  Id: x of type int [line: 88]
.   .   .   .   .   .   Child: 1  Id: y of type int [line: 88]
Sibling: 7  Func: Wensleydale returns type int [line: 90]
.   Child: 0  Parm: x of type int [line: 90]
.   Sibling: 1  Parm: y of type int [line: 90]
.   Child: 1  Compound [line: 90]
.   .   Child: 1  Return [line: 90]
.   .   .   Child: 0  Call: cheese of type int [line: 90]
.   .   .   .   Child: 0  Id: x of type int [line: 90]
.   .   .   .   Sibling: 1  Id: gromit of type int [line: 90]
Sibling: 8  Func: LadyCampanula returns type int [line: 92]
.   Child: 0  Parm: c of type char [line: 92]
.   Sibling: 1  Parm: s is array of type char [line: 92]
.   Child: 1  Compound [line: 92]
.   .   Child: 1  While [line: 92]
.   .   .   Child: 0  Const true of type bool [line: 92]
.   .   .   Child: 1  For [line: 92]
.   .   .   .   Child: 0  Var: i of type int [line: 92]
.   .   .   .   Child: 1  Range [line: 92]
.   .   .   .   .   Child: 0  Op: - of type int [line: 92]
.   .   .   .   .   .   Child: 0  Op: sizeof of type int [line: 92]
.   .   .   .   .   .   .   Child: 0  Id: s of type char [line: 92]
.   .   .   .   .   .   Child: 1  Const 1 of type int [line: 92]
.   .   .   .   .   Child: 1  Const 0 of type int [line: 92]
.   .   .   .   .   Child: 2  Op: chsign of type int [line: 92]
.   .   .   .   .   .   Child: 0  Const 1 of type int [line: 92]
.   .   .   .   Child: 2  If [line: 92]
.   .   .   .   .   Child: 0  Op: = of type bool [line: 92]
.   .   .   .   .   .   Child: 0  Op: [ of type char [line: 92]
.   .   .   .   .   .   .   Child: 0  Id: s of type char [line: 92]
.   .   .   .   .   .   .   Child: 1  Id: i of type int [line: 92]
.   .   .   .   .   .   Child: 1  Id: c of type char [line: 92]
.   .   .   .   .   Child: 1  Return [line: 92]
.   .   .   .   .   .   Child: 0  Id: i of type int [line: 92]
Sibling: 9  Func: MrsTweedy returns type char [line: 95]
.   Child: 0  Parm: c of type char [line: 95]
.   Sibling: 1  Parm: s is array of type char [line: 95]
.   Child: 1  Compound [line: 96]
.   .   Child: 1  For [line: 97]
.   .   .   Child: 0  Var: ginger of type int [line: 97]
.   .   .   Child: 1  Range [line: 97]
.   .   .   .   Child: 0  Const 0 of type int [line: 97]
.   .   .   .   Child: 1  Const 10 of type int [line: 97]
.   .   .   Child: 2  Assign: := of type char [line: 97]
.   .   .   .   Child: 0  Op: [ of type char [line: 97]
.   .   .   .   .   Child: 0  Id: s of type char [line: 97]
.   .   .   .   .   Child: 1  Id: ginger of type int [line: 97]
.   .   .   .   Child: 1  Id: c of type char [line: 97]
.   .   Sibling: 1  For [line: 98]
.   .   .   Child: 0  Var: pastry of type int [line: 98]
.   .   .   Child: 1  Range [line: 98]
.   .   .   .   Child: 0  Const 0 of type int [line: 98]
.   .   .   .   Child: 1  Const 2 of type int [line: 98]
.   .   .   .   Child: 2  Const 7 of type int [line: 98]
.   .   .   Child: 2  If [line: 98]
.   .   .   .   Child: 0  Op: = of type bool [line: 98]
.   .   .   .   .   Child: 0  Op: [ of type char [line: 98]
.   .   .   .   .   .   Child: 0  Id: s of type char [line: 98]
.   .   .   .   .   .   Child: 1  Const 0 of type int [line: 98]
.   .   .   .   .   Child: 1  Op: [ of type char [line: 98]
.   .   .   .   .   .   Child: 0  Id: s of type char [line: 98]
.   .   .   .   .   .   Child: 1  Const 1 of type int [line: 98]
.   .   .   .   Child: 1  Break [line: 98]
.   .   Sibling: 2  While [line: 99]
.   .   .   Child: 0  Const true of type bool [line: 99]
.   .   .   Child: 1  Break [line: 99]
.   .   Sibling: 3  Return [line: 101]
.   .   .   Child: 0  Const 'x' of type char [line: 101]
Sibling: 10  Func: TheWereRabbit returns type char [line: 104]
.   Child: 0  Parm: x of type int [line: 104]
.   Child: 1  Compound [line: 105]
.   .   Child: 1  If [line: 106]
.   .   .   Child: 0  Op: = of type bool [line: 106]
.   .   .   .   Child: 0  Id: x of type int [line: 106]
.   .   .   .   Child: 1  Const 0 of type int [line: 106]
.   .   .   Child: 1  Return [line: 106]
.   .   .   .   Child: 0  Const '@' of type char [line: 106]
.   .   .   Child: 2  If [line: 107]
.   .   .   .   Child: 0  Op: = of type bool [line: 107]
.   .   .   .   .   Child: 0  Id: x of type int [line: 107]
.   .   .   .   .   Child: 1  Const 1 of type int [line: 107]
.   .   .   .   Child: 1  Return [line: 107]
.   .   .   .   .   Child: 0  Const 'a' of type char [line: 107]
.   .   .   .   Child: 2  If [line: 108]
.   .   .   .   .   Child: 0  Op: = of type bool [line: 108]
.   .   .   .   .   .   Child: 0  Id: x of type int [line: 108]
.   .   .   .   .   .   Child: 1  Const 2 of type int [line: 108]
.   .   .   .   .   Child: 1  Return [line: 108]
.   .   .   .   .   .   Child: 0  Const 'b' of type char [line: 108]
.   .   .   .   .   Child: 2  If [line: 109]
.   .   .   .   .   .   Child: 0  Op: = of type bool [line: 109]
.   .   .   .   .   .   .   Child: 0  Id: x of type int [line: 109]
.   .   .   .   .   .   .   Child: 1  Const 3 of type int [line: 109]
.   .   .   .   .   .   Child: 1  Return [line: 109]
.   .   .   .   .   .   .   Child: 0  Const 'c' of type char [line: 109]
.   .   .   .   .   .   Child: 2  If [line: 110]
.   .   .   .   .   .   .   Child: 0  Op: = of type bool [line: 110]
.   .   .   .   .   .   .   .   Child: 0  Id: x of type int [line: 110]
.   .   .   .   .   .   .   .   Child: 1  Const 4 of type int [line: 110]
.   .   .   .   .   .   .   Child: 1  Return [line: 110]
.   .   .   .   .   .   .   .   Child: 0  Const 'd' of type char [line: 110]
.   .   .   .   .   .   .   Child: 2  Return [line: 111]
.   .   .   .   .   .   .   .   Child: 0  Const ' ' of type char [line: 111]
Sibling: 11  Func: main returns type int [line: 114]
.   Child: 1  Compound [line: 115]
.   .   Child: 0  Var: wool of type int [line: 116]
.   .   Sibling: 1  Var: yarn is array of type int [line: 116]
.   .   Sibling: 2  Var: shaun of type bool [line: 117]
.   .   Sibling: 3  Var: preston is array of type bool [line: 117]
.   .   Sibling: 4  Var: rocky is array of type char [line: 118]
.   .   Child: 1  Call: wallace of type void [line: 120]
.   .   .   Child: 0  Call: cheese of type int [line: 120]
.   .   .   .   Child: 0  Const 62 of type int [line: 120]
.   .   .   .   Sibling: 1  Op: chsign of type int [line: 120]
.   .   .   .   .   Child: 0  Const 311 of type int [line: 120]
.   .   .   Sibling: 1  Id: gromit of type int [line: 120]
.   .   Sibling: 1  Assign: := of type char [line: 121]
.   .   .   Child: 0  Id: rocky of type char [line: 121]
.   .   .   Child: 1  Const is array "molybdenum" of type char [line: 121]
.   .   Sibling: 2  Call: MrsTweedy of type char [line: 123]
.   .   .   Child: 0  Const 'Z' of type char [line: 123]
.   .   .   Sibling: 1  Id: rocky of type char [line: 123]
.   .   Sibling: 3  Op: + of type int [line: 125]
.   .   .   Child: 0  Op: [ of type int [line: 125]
.   .   .   .   Child: 0  Id: yarn of type int [line: 125]
.   .   .   .   Child: 1  Op: ? of type int [line: 125]
.   .   .   .   .   Child: 0  Const 100 of type int [line: 125]
.   .   .   Child: 1  Op: [ of type int [line: 125]
.   .   .   .   Child: 0  Id: yarn of type int [line: 125]
.   .   .   .   Child: 1  Op: ? of type int [line: 125]
.   .   .   .   .   Child: 0  Op: sizeof of type int [line: 125]
.   .   .   .   .   .   Child: 0  Id: yarn of type int [line: 125]
.   .   Sibling: 4  Return [line: 127]
.   .   .   Child: 0  Call: Wendolene of type int [line: 127]
.   .   .   .   Child: 0  Op: * of type int [line: 127]
.   .   .   .   .   Child: 0  Op: sizeof of type int [line: 127]
.   .   .   .   .   .   Child: 0  Id: preston of type bool [line: 127]
.   .   .   .   .   Child: 1  Op: sizeof of type int [line: 127]
.   .   .   .   .   .   Child: 0  Id: yarn of type int [line: 127]
.   .   .   .   Sibling: 1  Id: shaun of type bool [line: 127]
.   .   .   .   Sibling: 2  Id: yarn of type int [line: 127]
.   .   .   .   Sibling: 3  Id: preston of type bool [line: 127]
Sibling: 12  Var: aBigLongVariableName6andthx1138 of type bool [line: 130]
Sibling: 13  Var: odd of type int [line: 131]
Sibling: 14  Var: separation of type int [line: 131]
Sibling: 15  Var: of of type int [line: 131]
Sibling: 16  Var: stuff of type int [line: 132]
Sibling: 17  Var: ant is array of type char [line: 134]
.   Child: 0  Const is array "unwrinkled" of type char [line: 134]
Sibling: 18  Var: bat of type char [line: 135]
.   Child: 0  Const ''' of type char [line: 135]
Sibling: 19  Var: cat of type char [line: 136]
.   Child: 0  Const 't' of type char [line: 136]
Sibling: 20  Var: dog of type char [line: 137]
.   Child: 0  Const '
' of type char [line: 137]
Sibling: 21  Var: hog of type char [line: 138]
.   Child: 0  Const ' ' of type char [line: 138]

Number of warnings: 17
Number of errors: 0
